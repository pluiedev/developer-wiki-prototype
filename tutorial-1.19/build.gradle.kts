// This is to suppress false warnings generated by a bug in IntelliJ
@file:Suppress("DSL_SCOPE_VIOLATION", "MISSING_DEPENDENCY_CLASS", "FUNCTION_CALL_EXPECTED", "PropertyName")

import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    groovy
    scala
    alias(libs119.plugins.kotlin)
    alias(libs119.plugins.quilt.loom)
    `maven-publish`

    id("org.quiltmc.wiki-plugin")
}

val javaVersion = 17

group = rootProject.group
version = rootProject.version

repositories {
    mavenCentral()

    // Adding GroovyDuvet for groovy language adapter
    maven("https://maven.moddinginquisition.org/releases")

    maven("https://maven.quiltmc.org/repository/release") {
        name = "Quilt"
    }
}

dependencies {
    minecraft(libs119.minecraft)
    mappings(
        variantOf(libs119.quilt.mappings) {
            classifier("intermediary-v2")
        }
    )
    modImplementation(libs119.quilt.loader)
    modImplementation(libs119.qfapi)

    // Groovy
    // GroovyDuvet allows for loading groovy mods, and has wrappers around minecraft and QSL code for ease of development.
    modImplementation(libs119.groovyduvet)
    runtimeOnly(libs119.groovyduvet.groovy)

    // Kotlin
    modImplementation(libs119.qkl)
    // Scala
    // There is no official quilt library for scala, so a standard import is used
    // This should NOT be used as a replacement for a proper language adapter
    implementation(libs119.scala3.library)
}


tasks {
    withType<KotlinCompile> {
        kotlinOptions {
            jvmTarget = javaVersion.toString()
            // languageVersion: A.B of the kotlin plugin version A.B.C
            languageVersion = libs119.plugins.kotlin.get().version.requiredVersion.substringBeforeLast('.')
        }
    }
    withType<JavaCompile>().configureEach {
        options.encoding = "UTF-8"
        options.isDeprecation = true
        options.release.set(javaVersion)
    }
    withType<ProcessResources>().configureEach {
        filteringCharset = "UTF-8"
        inputs.property("version", version)

        filesMatching("quilt.mod.json") {
            // Allow language-specific resources to override main resources without a warning.
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
            expand("version" to version)
        }
    }
}

val targetJavaVersion = JavaVersion.toVersion(javaVersion)
if (JavaVersion.current() < targetJavaVersion) {
    kotlin.jvmToolchain(javaVersion)

    java.toolchain {
        languageVersion.set(JavaLanguageVersion.of(javaVersion))
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    // If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
    // Uncomment this line to generate them.
    // withJavadocJar()

    // Still required by IDEs such as Eclipse and VSC
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
}

// Configure the maven publication
publishing {
    publications {
        register<MavenPublication>("mavenJava") {
            from(components.getByName("java"))
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

loom.runs {
    wiki.languages.get().forEach {
        create("${it}Client") {
            client()
            setSource(sourceSets.getByName(it))
        }
        create("${it}Server") {
            server()
            setSource(sourceSets.getByName(it))
        }
    }
}